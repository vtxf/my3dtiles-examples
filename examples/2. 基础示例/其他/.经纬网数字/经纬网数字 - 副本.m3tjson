{
    "asset": {
        "type": "My3dtiles",
        "version": "0.9.30",
        "createdTime": "2024-12-09T03:32:49.097Z",
        "modifiedTime": "2024-12-09T08:43:28.102Z",
        "name": "未命名项目"
    },
    "sceneTree": {
        "root": {
            "name": "root",
            "children": [
                {
                    "name": "SceneScript",
                    "sceneObj": {
                        "id": "2444058a-0e33-4626-9553-7ab26241f8d9",
                        "type": "SceneScript",
                        "evalFuncStr": "const { Color } = Cesium;\r\nconst { defaultValue } = Cesium;\r\nconst { defined } = Cesium;\r\nconst { Event } = Cesium;\r\nconst { GeographicTilingScheme } = Cesium;\r\n\r\n/**\r\n * @typedef {object} TileCoordinatesImageryProvider.ConstructorOptions\r\n *\r\n * Initialization options for the TileCoordinatesImageryProvider constructor\r\n *\r\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme for which to draw tiles.\r\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,\r\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\r\n *                    parameter is specified, the WGS84 ellipsoid is used.\r\n * @property {Color} [color=Color.YELLOW] The color to draw the tile box and label.\r\n * @property {number} [tileWidth=256] The width of the tile for level-of-detail selection purposes.\r\n * @property {number} [tileHeight=256] The height of the tile for level-of-detail selection purposes.\r\n */\r\n\r\n/**\r\n * An {@link ImageryProvider} that draws a box around every rendered tile in the tiling scheme, and draws\r\n * a label inside it indicating the X, Y, Level coordinates of the tile.  This is mostly useful for\r\n * debugging terrain and imagery rendering problems.\r\n *\r\n * @alias TileCoordinatesImageryProvider\r\n * @constructor\r\n *\r\n * @param {TileCoordinatesImageryProvider.ConstructorOptions} [options] Object describing initialization options\r\n */\r\nfunction TileCoordinatesImageryProvider(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  this._tilingScheme = defined(options.tilingScheme)\r\n    ? options.tilingScheme\r\n    : new GeographicTilingScheme({ ellipsoid: options.ellipsoid });\r\n  this._color = defaultValue(options.color, Color.YELLOW);\r\n  this._errorEvent = new Event();\r\n  this._tileWidth = defaultValue(options.tileWidth, 256);\r\n  this._tileHeight = defaultValue(options.tileHeight, 256);\r\n\r\n  this._defaultAlpha = undefined;\r\n  this._defaultNightAlpha = undefined;\r\n  this._defaultDayAlpha = undefined;\r\n  this._defaultBrightness = undefined;\r\n  this._defaultContrast = undefined;\r\n  this._defaultHue = undefined;\r\n  this._defaultSaturation = undefined;\r\n  this._defaultGamma = undefined;\r\n  this._defaultMinificationFilter = undefined;\r\n  this._defaultMagnificationFilter = undefined;\r\n}\r\n\r\nObject.defineProperties(TileCoordinatesImageryProvider.prototype, {\r\n  /**\r\n   * Gets the proxy used by this provider.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {Proxy}\r\n   * @readonly\r\n   */\r\n  proxy: {\r\n    get: function () {\r\n      return undefined;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the width of each tile, in pixels.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {number}\r\n   * @readonly\r\n   */\r\n  tileWidth: {\r\n    get: function () {\r\n      return this._tileWidth;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the height of each tile, in pixels.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {number}\r\n   * @readonly\r\n   */\r\n  tileHeight: {\r\n    get: function () {\r\n      return this._tileHeight;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the maximum level-of-detail that can be requested.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {number|undefined}\r\n   * @readonly\r\n   */\r\n  maximumLevel: {\r\n    get: function () {\r\n      return undefined;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the minimum level-of-detail that can be requested.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {number}\r\n   * @readonly\r\n   */\r\n  minimumLevel: {\r\n    get: function () {\r\n      return undefined;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the tiling scheme used by this provider.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {TilingScheme}\r\n   * @readonly\r\n   */\r\n  tilingScheme: {\r\n    get: function () {\r\n      return this._tilingScheme;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {Rectangle}\r\n   * @readonly\r\n   */\r\n  rectangle: {\r\n    get: function () {\r\n      return this._tilingScheme.rectangle;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\r\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\r\n   * returns undefined, no tiles are filtered.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {TileDiscardPolicy}\r\n   * @readonly\r\n   */\r\n  tileDiscardPolicy: {\r\n    get: function () {\r\n      return undefined;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\r\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\r\n   * are passed an instance of {@link TileProviderError}.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  errorEvent: {\r\n    get: function () {\r\n      return this._errorEvent;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\r\n   * the source of the imagery.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {Credit}\r\n   * @readonly\r\n   */\r\n  credit: {\r\n    get: function () {\r\n      return undefined;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets a value indicating whether or not the images provided by this imagery provider\r\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\r\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\r\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\r\n   * and texture upload time.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {boolean}\r\n   * @readonly\r\n   */\r\n  hasAlphaChannel: {\r\n    get: function () {\r\n      return true;\r\n    },\r\n  },\r\n});\r\n\r\n/**\r\n * Gets the credits to be displayed when a given tile is displayed.\r\n *\r\n * @param {number} x The tile X coordinate.\r\n * @param {number} y The tile Y coordinate.\r\n * @param {number} level The tile level;\r\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\r\n */\r\nTileCoordinatesImageryProvider.prototype.getTileCredits = function (\r\n  x,\r\n  y,\r\n  level\r\n) {\r\n  return undefined;\r\n};\r\n\r\n/**\r\n * Requests the image for a given tile.\r\n *\r\n * @param {number} x The tile X coordinate.\r\n * @param {number} y The tile Y coordinate.\r\n * @param {number} level The tile level.\r\n * @param {Request} [request] The request object. Intended for internal use only.\r\n * @returns {Promise<HTMLCanvasElement>} The resolved image as a Canvas DOM object.\r\n */\r\nTileCoordinatesImageryProvider.prototype.requestImage = function (\r\n  x,\r\n  y,\r\n  level,\r\n  request\r\n) {\r\n  const canvas = document.createElement(\"canvas\");\r\n\r\n  const gridSize = 512;\r\n\r\n  canvas.width = gridSize;\r\n  canvas.height = gridSize;\r\n  const context = canvas.getContext(\"2d\");\r\n\r\n  const cssColor = this._color.toCssColorString();\r\n\r\n  // context.strokeStyle = cssColor;\r\n  // context.lineWidth = 2;\r\n  // context.strokeRect(1, 1, 255, 255);\r\n\r\n  // context.font = \"bold 25px Arial\";\r\n  // context.textAlign = \"center\";\r\n  // context.fillStyle = cssColor;\r\n  // context.fillText(`L: ${level}`, 124, 86);\r\n  // context.fillText(`X: ${x}`, 124, 136);\r\n  // context.fillText(`Y: ${y}`, 124, 186);\r\n\r\n  window.m3tDegreeToHumanFormat =\r\n    window.m3tDegreeToHumanFormat ??\r\n    function m3tDegreeToHumanFormat(degree, posSuffix = \"N\", negSuffix = \"S\") {\r\n      const abs = Math.abs(degree);\r\n      const deg = Math.floor(abs);\r\n      const min = Math.floor((abs - deg) * 60);\r\n      // const sec = Math.floor(((abs - deg) * 60 - min) * 60);\r\n      const sec = (((abs - deg) * 60 - min) * 60).toFixed(3);\r\n      return `${deg}°${min}'${sec}\" ${degree >= 0 ? posSuffix : negSuffix}`;\r\n    };\r\n\r\n  // 地球半径（单位：米），Web Mercator投影常用的地球半径取值\r\n  const R = 6378137;\r\n\r\n  // 反算经度的函数\r\n  window.webMercatorXToLon =\r\n    window.webMercatorXToLon ??\r\n    function webMercatorXToLon(x) {\r\n      return (x / R) * (180 / Math.PI);\r\n    };\r\n\r\n  // 反算纬度的函数\r\n  window.webMercatorYToLat =\r\n    window.webMercatorYToLat ??\r\n    function webMercatorYToLat(y) {\r\n      return (2 * Math.atan(Math.exp(y / R)) - Math.PI / 2) * (180 / Math.PI);\r\n    };\r\n\r\n  const [longitude, latitude] = (() => {\r\n    if (this._tilingScheme instanceof GeographicTilingScheme) {\r\n      const gridDegree = 180 * Math.pow(2, -level);\r\n      const longitude = -180 + gridDegree * (x + 1);\r\n      const latitude = 90 - gridDegree * (y + 1);\r\n      return [longitude, latitude];\r\n    }\r\n\r\n    // 以下计算不对\r\n    // const m = 85.05112877980659;\r\n    // const latitude = m - m * 2 * Math.pow(2, -level) * (y + 1);\r\n    // const longitude = -180 + 180 * 2 * Math.pow(2, -level) * (x + 1);\r\n    // WebMercato在不同层级的经纬度计算方法\r\n    const webMercatorGridSize = R * Math.PI * 2 * Math.pow(2, -level);\r\n    const webMercatorX = -(R * Math.PI) + webMercatorGridSize * (x + 1);\r\n    const webMercatorY = R * Math.PI - webMercatorGridSize * (y + 1);\r\n    const longitude = window.webMercatorXToLon(webMercatorX);\r\n    const latitude = window.webMercatorYToLat(webMercatorY);\r\n\r\n    return [longitude, latitude];\r\n  })();\r\n\r\n  context.fillStyle = \"white\";\r\n  context.font = \"48px Arial\";\r\n  context.textAlign = \"center\";\r\n\r\n  context.fillText(`${window.m3tDegreeToHumanFormat(latitude)}`, gridSize * 0.5, gridSize * (512 - 6) / 512);\r\n\r\n  context.save();\r\n  context.translate(gridSize, gridSize * 0.5);\r\n  context.rotate(-Math.PI * 0.5);\r\n  context.fillText(\r\n    `${window.m3tDegreeToHumanFormat(longitude, \"E\", \"W\")}`,\r\n    0,\r\n    -6\r\n  );\r\n  context.restore();\r\n\r\n  return Promise.resolve(canvas);\r\n};\r\n\r\n/**\r\n * Picking features is not currently supported by this imagery provider, so this function simply returns\r\n * undefined.\r\n *\r\n * @param {number} x The tile X coordinate.\r\n * @param {number} y The tile Y coordinate.\r\n * @param {number} level The tile level.\r\n * @param {number} longitude The longitude at which to pick features.\r\n * @param {number} latitude  The latitude at which to pick features.\r\n * @return {undefined} Undefined since picking is not supported.\r\n */\r\nTileCoordinatesImageryProvider.prototype.pickFeatures = function (\r\n  x,\r\n  y,\r\n  level,\r\n  longitude,\r\n  latitude\r\n) {\r\n  return undefined;\r\n};\r\n\r\n\r\nwindow.TileCoordinatesImageryProvider = TileCoordinatesImageryProvider;",
                        "runOnLoaded": true,
                        "name": "SceneScript"
                    }
                },
                {
                    "name": "自定义影像",
                    "sceneObj": {
                        "id": "3a3d0d33-1846-42b6-a4a5-6c16a555ff83",
                        "type": "CzmImagery",
                        "imageryProvider": {
                            "type": "CustomImageryProvider",
                            "createImageryProviderFuncStr": "function() { return new TileCoordinatesImageryProvider(); }"
                        },
                        "name": "自定义影像",
                        "execOnceFuncStr": "const { Color } = Cesium;\r\nconst { defaultValue } = Cesium;\r\nconst { defined } = Cesium;\r\nconst { Event } = Cesium;\r\nconst { GeographicTilingScheme } = Cesium;\r\n\r\n/**\r\n * @typedef {object} TileCoordinatesImageryProvider.ConstructorOptions\r\n *\r\n * Initialization options for the TileCoordinatesImageryProvider constructor\r\n *\r\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme for which to draw tiles.\r\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,\r\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\r\n *                    parameter is specified, the WGS84 ellipsoid is used.\r\n * @property {Color} [color=Color.YELLOW] The color to draw the tile box and label.\r\n * @property {number} [tileWidth=256] The width of the tile for level-of-detail selection purposes.\r\n * @property {number} [tileHeight=256] The height of the tile for level-of-detail selection purposes.\r\n */\r\n\r\n/**\r\n * An {@link ImageryProvider} that draws a box around every rendered tile in the tiling scheme, and draws\r\n * a label inside it indicating the X, Y, Level coordinates of the tile.  This is mostly useful for\r\n * debugging terrain and imagery rendering problems.\r\n *\r\n * @alias TileCoordinatesImageryProvider\r\n * @constructor\r\n *\r\n * @param {TileCoordinatesImageryProvider.ConstructorOptions} [options] Object describing initialization options\r\n */\r\nfunction TileCoordinatesImageryProvider(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  this._tilingScheme = defined(options.tilingScheme)\r\n    ? options.tilingScheme\r\n    : new GeographicTilingScheme({ ellipsoid: options.ellipsoid });\r\n  this._color = defaultValue(options.color, Color.YELLOW);\r\n  this._errorEvent = new Event();\r\n  this._tileWidth = defaultValue(options.tileWidth, 256);\r\n  this._tileHeight = defaultValue(options.tileHeight, 256);\r\n\r\n  this._defaultAlpha = undefined;\r\n  this._defaultNightAlpha = undefined;\r\n  this._defaultDayAlpha = undefined;\r\n  this._defaultBrightness = undefined;\r\n  this._defaultContrast = undefined;\r\n  this._defaultHue = undefined;\r\n  this._defaultSaturation = undefined;\r\n  this._defaultGamma = undefined;\r\n  this._defaultMinificationFilter = undefined;\r\n  this._defaultMagnificationFilter = undefined;\r\n}\r\n\r\nObject.defineProperties(TileCoordinatesImageryProvider.prototype, {\r\n  /**\r\n   * Gets the proxy used by this provider.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {Proxy}\r\n   * @readonly\r\n   */\r\n  proxy: {\r\n    get: function () {\r\n      return undefined;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the width of each tile, in pixels.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {number}\r\n   * @readonly\r\n   */\r\n  tileWidth: {\r\n    get: function () {\r\n      return this._tileWidth;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the height of each tile, in pixels.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {number}\r\n   * @readonly\r\n   */\r\n  tileHeight: {\r\n    get: function () {\r\n      return this._tileHeight;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the maximum level-of-detail that can be requested.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {number|undefined}\r\n   * @readonly\r\n   */\r\n  maximumLevel: {\r\n    get: function () {\r\n      return undefined;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the minimum level-of-detail that can be requested.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {number}\r\n   * @readonly\r\n   */\r\n  minimumLevel: {\r\n    get: function () {\r\n      return undefined;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the tiling scheme used by this provider.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {TilingScheme}\r\n   * @readonly\r\n   */\r\n  tilingScheme: {\r\n    get: function () {\r\n      return this._tilingScheme;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {Rectangle}\r\n   * @readonly\r\n   */\r\n  rectangle: {\r\n    get: function () {\r\n      return this._tilingScheme.rectangle;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\r\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\r\n   * returns undefined, no tiles are filtered.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {TileDiscardPolicy}\r\n   * @readonly\r\n   */\r\n  tileDiscardPolicy: {\r\n    get: function () {\r\n      return undefined;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\r\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\r\n   * are passed an instance of {@link TileProviderError}.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  errorEvent: {\r\n    get: function () {\r\n      return this._errorEvent;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\r\n   * the source of the imagery.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {Credit}\r\n   * @readonly\r\n   */\r\n  credit: {\r\n    get: function () {\r\n      return undefined;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets a value indicating whether or not the images provided by this imagery provider\r\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\r\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\r\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\r\n   * and texture upload time.\r\n   * @memberof TileCoordinatesImageryProvider.prototype\r\n   * @type {boolean}\r\n   * @readonly\r\n   */\r\n  hasAlphaChannel: {\r\n    get: function () {\r\n      return true;\r\n    },\r\n  },\r\n});\r\n\r\n/**\r\n * Gets the credits to be displayed when a given tile is displayed.\r\n *\r\n * @param {number} x The tile X coordinate.\r\n * @param {number} y The tile Y coordinate.\r\n * @param {number} level The tile level;\r\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\r\n */\r\nTileCoordinatesImageryProvider.prototype.getTileCredits = function (\r\n  x,\r\n  y,\r\n  level\r\n) {\r\n  return undefined;\r\n};\r\n\r\n/**\r\n * Requests the image for a given tile.\r\n *\r\n * @param {number} x The tile X coordinate.\r\n * @param {number} y The tile Y coordinate.\r\n * @param {number} level The tile level.\r\n * @param {Request} [request] The request object. Intended for internal use only.\r\n * @returns {Promise<HTMLCanvasElement>} The resolved image as a Canvas DOM object.\r\n */\r\nTileCoordinatesImageryProvider.prototype.requestImage = function (\r\n  x,\r\n  y,\r\n  level,\r\n  request\r\n) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = 512;\r\n  canvas.height = 512;\r\n  const context = canvas.getContext(\"2d\");\r\n\r\n  const cssColor = this._color.toCssColorString();\r\n\r\n  // context.strokeStyle = cssColor;\r\n  // context.lineWidth = 2;\r\n  // context.strokeRect(1, 1, 255, 255);\r\n\r\n  // context.font = \"bold 25px Arial\";\r\n  // context.textAlign = \"center\";\r\n  // context.fillStyle = cssColor;\r\n  // context.fillText(`L: ${level}`, 124, 86);\r\n  // context.fillText(`X: ${x}`, 124, 136);\r\n  // context.fillText(`Y: ${y}`, 124, 186);\r\n\r\n  window.m3tDegreeToHumanFormat =\r\n    window.m3tDegreeToHumanFormat ??\r\n    function m3tDegreeToHumanFormat(degree, posSuffix = \"N\", negSuffix = \"S\") {\r\n      const abs = Math.abs(degree);\r\n      const deg = Math.floor(abs);\r\n      const min = Math.floor((abs - deg) * 60);\r\n      // const sec = Math.floor(((abs - deg) * 60 - min) * 60);\r\n      const sec = (((abs - deg) * 60 - min) * 60).toFixed(3);\r\n      return `${deg}°${min}'${sec}\" ${degree >= 0 ? posSuffix : negSuffix}`;\r\n    };\r\n\r\n  // 地球半径（单位：米），Web Mercator投影常用的地球半径取值\r\n  const R = 6378137;\r\n\r\n  // 反算经度的函数\r\n  window.webMercatorXToLon =\r\n    window.webMercatorXToLon ??\r\n    function webMercatorXToLon(x) {\r\n      return (x / R) * (180 / Math.PI);\r\n    };\r\n\r\n  // 反算纬度的函数\r\n  window.webMercatorYToLat =\r\n    window.webMercatorYToLat ??\r\n    function webMercatorYToLat(y) {\r\n      return (2 * Math.atan(Math.exp(y / R)) - Math.PI / 2) * (180 / Math.PI);\r\n    };\r\n\r\n  const [longitude, latitude] = (() => {\r\n    if (this._tilingScheme instanceof GeographicTilingScheme) {\r\n      const gridDegree = 180 * Math.pow(2, -level);\r\n      const longitude = -180 + gridDegree * (x + 1);\r\n      const latitude = 90 - gridDegree * (y + 1);\r\n      return [longitude, latitude];\r\n    }\r\n\r\n    // 以下计算不对\r\n    // const m = 85.05112877980659;\r\n    // const latitude = m - m * 2 * Math.pow(2, -level) * (y + 1);\r\n    // const longitude = -180 + 180 * 2 * Math.pow(2, -level) * (x + 1);\r\n    // WebMercato在不同层级的经纬度计算方法\r\n    const webMercatorGridSize = R * Math.PI * 2 * Math.pow(2, -level);\r\n    const webMercatorX = -(R * Math.PI) + webMercatorGridSize * (x + 1);\r\n    const webMercatorY = R * Math.PI - webMercatorGridSize * (y + 1);\r\n    const longitude = window.webMercatorXToLon(webMercatorX);\r\n    const latitude = window.webMercatorYToLat(webMercatorY);\r\n\r\n    return [longitude, latitude];\r\n  })();\r\n\r\n  context.fillStyle = \"white\";\r\n  context.font = \"24px Arial\";\r\n  context.textAlign = \"center\";\r\n\r\n  context.fillText(`${window.m3tDegreeToHumanFormat(latitude)}`, 256, 512 - 6);\r\n\r\n  context.save();\r\n  context.translate(512, 256);\r\n  context.rotate(-Math.PI * 0.5);\r\n  context.fillText(\r\n    `${window.m3tDegreeToHumanFormat(longitude, \"E\", \"W\")}`,\r\n    0,\r\n    -6\r\n  );\r\n  context.restore();\r\n\r\n  return Promise.resolve(canvas);\r\n};\r\n\r\n/**\r\n * Picking features is not currently supported by this imagery provider, so this function simply returns\r\n * undefined.\r\n *\r\n * @param {number} x The tile X coordinate.\r\n * @param {number} y The tile Y coordinate.\r\n * @param {number} level The tile level.\r\n * @param {number} longitude The longitude at which to pick features.\r\n * @param {number} latitude  The latitude at which to pick features.\r\n * @return {undefined} Undefined since picking is not supported.\r\n */\r\nTileCoordinatesImageryProvider.prototype.pickFeatures = function (\r\n  x,\r\n  y,\r\n  level,\r\n  longitude,\r\n  latitude\r\n) {\r\n  return undefined;\r\n};\r\n\r\n\r\nwindow.TileCoordinatesImageryProvider = TileCoordinatesImageryProvider;"
                    }
                },
                {
                    "name": "经纬度网格",
                    "sceneObj": {
                        "id": "735c906a-ecef-47b9-827e-d8ea7d913969",
                        "type": "CzmImagery",
                        "imageryProvider": {
                            "type": "GridImageryProvider",
                            "tilingScheme": {
                                "type": "GeographicTilingScheme"
                            },
                            "backgroundColor": [
                                0,
                                0,
                                0,
                                0
                            ],
                            "glowColor": [
                                1,
                                1,
                                1,
                                0.05
                            ],
                            "glowWidth": 2,
                            "canvasSize": 512,
                            "cells": 1
                        },
                        "name": "经纬度网格"
                    }
                }
            ]
        }
    },
    "builtin": {
        "czmViewer": {
            "id": "5b948a14-1525-461e-b0a2-a28f4a0daba4",
            "type": "CzmViewer",
            "show": true,
            "actived": true,
            "name": "默认视口",
            "ref": "v",
            "sceneSsccZoomFactor": 2,
            "clockCurrentTime": 1733715169103
        },
        "offlineImagery": {
            "id": "4629476e-a8c3-4f4c-8d60-fa6c2ec85fdd",
            "type": "CzmImagery",
            "imageryProvider": {
                "type": "TileMapServiceImageryProvider",
                "url": "${czm-path}/Assets/Textures/NaturalEarthII"
            },
            "zIndex": -2,
            "name": "默认离线影像"
        },
        "baseImagery": {
            "id": "92ce2b16-8bbd-4007-956c-16fccee0aa6e",
            "type": "CzmImagery",
            "imageryProvider": {
                "type": "UrlTemplateImageryProvider",
                "url": "https://{s}.tianditu.gov.cn/img_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=85c9d12d5d691d168ba5cb6ecaa749eb",
                "subdomains": [
                    "t0",
                    "t1",
                    "t2",
                    "t3",
                    "t4",
                    "t5",
                    "t6",
                    "t7"
                ],
                "minimumLevel": 0,
                "maximumLevel": 18
            },
            "zIndex": -1,
            "name": "基础地球影像"
        },
        "czmTerrain": {
            "id": "928da0a9-a69e-4f09-a6fe-c38cbce2d55a",
            "type": "CzmTerrain",
            "show": false,
            "provider": {
                "type": "CesiumTerrainProvider",
                "url": "ion://1",
                "requestVertexNormals": true
            },
            "name": "Cesium官方地形"
        },
        "czmClassicNavigator": {
            "id": "f4bf01e0-51d2-42ca-b564-c14e1103fb71",
            "type": "CzmClassicNavigator",
            "name": "经典指北针"
        },
        "lastView": {
            "id": "1b80d81a-57c7-4a8c-8de7-20bd5e8acab6",
            "type": "View",
            "position": [
                123.6238947970097,
                24.834008867904398,
                1431866.2675049528
            ],
            "rotation": [
                339.8407209289221,
                -76.07763646829497,
                0.3872444106891683
            ],
            "name": "最近视角"
        },
        "initOptions": {
            "id": "1e3a6493-724b-4909-9cae-d873fb268599",
            "type": "M3tInitOptions",
            "name": "初始化选项"
        }
    }
}